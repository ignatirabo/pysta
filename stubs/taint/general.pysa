### SOURCES

# for which example do we need the django thingy?
# used for exercise 1 of Pysa documentation
django.http.HttpRequest.GET: TaintSource[UserControlled] = ...

# model for raw_input
def input(__prompt) -> TaintSource[UserControlled]: ...
def round(number) -> TaintSource[Rounded]: ...

### SINKS

# model for sqs_lambda.py
# def urllib.request.Request(url, data: TaintSink[AuthorizedChannel], headers): ...
def urllib.request.urlopen(url: TaintSink[AuthorizedChannel], data, timeout, cafile, capath, cadefault, context): ...

# model for vulnerable_lambda.py
def sqlite_utils.db.Database.query(sql: TaintSink[SqlInjection], params): ...

# model for os.system
def os.system(command: TaintSink[RemoteCodeExecution]): ...

# model for print
def print(*objects: TaintSink[Print], sep, end, file, flush): ...
def eval(__source: TaintSink[CodeExecution], __globals, __locals): ...

# testing functions
def library.funs.id_source1(x) -> TaintSource[TestSource1]: ...
def library.funs.id_sink1(x: TaintSink[TestSink1]): ...

# for cpython example
def distutils.spawn.spawn(cmd: TaintSink[RemoteCodeExecution], search_path, verbose, dry_run): ...

# for while.03
def open(file, mode) -> TaintSource[UserControlled]: ...

# for CVE-2021-41496
def numpy.core.multiarray.zeros(shape: TaintSink[MemAlloc], dtype, order, like): ...

# for XML Billion Laughs
def xml.etree.ElementTree.XML(text: TaintSink[Xml], parser): ...
@Sanitize
def library.funs.escape(text): ...

# Sanitizers tests
@Sanitize(Parameters)
def library.funs.sanitize_params(x): ...
@Sanitize
def library.funs.sanitize(x): ...
@Sanitize(Parameters)
def library.funs.sanitize_sink(x: TaintSink[RemoteCodeExecution]): ...
