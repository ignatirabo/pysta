module SSet = String_helper.SSet
module SMap = String_helper.SMap
module P = Prog
module L = Language
module Lo = Location
module T = Taint
module C = Counter.CounterConstant4
module D = Domain
module E = L.Expr
module F = Function
module S = Signature
module SMT = Smt

type context = { prog: P.prog ; sign: Signature.t list ; locs: Lo.location option } 
type config = { block: L.block_ext ; state: D.state ; flag: Flag.t ; id: Id.t ; counter: C.t }

let rec find_loc_block (loc: Lo.location) (block: L.block) : L.block option =
  match block with
  | [] -> None
  | (loc',stmt)::block ->
    if !Utils.debug then
      Printf.printf "loc'={ start=%d ; stop=%d }, stmt=%a\n" loc'.start loc'.stop (P.pp_stat "") stmt;
    if loc.start = loc'.start then
      Some ((loc',stmt)::block)
    else if loc.start <= loc'.stop then
      match stmt with
      | If (_,b0,b1) ->
        let block = find_loc_block loc b0 in
        if Option.is_some block then block
        else
          let block = find_loc_block loc b1 in
          if Option.is_some block then block
          else None
      | While (_,b) ->
        let block = find_loc_block loc b in
        if Option.is_some block then block
        else None
      | _ -> find_loc_block loc block
    else
      find_loc_block loc block

let rec find_loc (loc: Lo.location) ctx : L.block =
  (* Try to find location in all the programs *)
  (* 1. Check main body *)
  let oblock = find_loc_block loc ctx.prog.pmain in
  if Option.is_some oblock then
    Option.get oblock
  else
    (* 2. check procs *)
    let rec loop_funcs (funcs: F.t) =
      SMap.find_first (fun name ->
        let func = SMap.find name funcs in
        let oblock = try find_loc_block loc (Option.get func.body) with _ -> None in
        Option.is_some oblock) funcs in
    try
      let _, func = loop_funcs ctx.prog.funcs in
      Option.get func.body
    with _ -> failwith "No initial location found."

(** Create initial abstract configuration from program *)
let init ?(svm=None) (ctx: context) : config =
  let block =
    if Option.is_none ctx.locs then
      L.block_to_ext ~sign:ctx.sign ctx.prog.pmain
    else
      let locs = Option.get ctx.locs in
      find_loc locs ctx |> L.block_to_ext ~sign:ctx.sign in
  let state =  D.new_state ~svm (Some ctx.prog) in
  { state ; block ; id=Id.make false; counter=C.empty ; flag=[] }

let add_symb_tmap (tmap: E.texpr SMap.t) (name: string) (taint: T.t) : E.texpr * E.texpr SMap.t =
  let symbname = SMT.new_var name in
  let te: E.texpr = Evar (taint,symbname) in
  te, SMap.add name te tmap

(** Auxiliary for assignemnt on dictionaries or objects. *)
let update_lexpr (e: E.lexpr) (te: E.texpr) (s: D.state) : D.state =
  let d, s = match e with
    | Attrib (v,a) | Subscript (v,a) ->
      let a = E.expr_2str a in
      let o, s = D.find v s in
      let tmap = E.get_tmap o in
      let d = SMap.add a te tmap in
      d, s
    | _ -> failwith "update_lexpr: not a dict or object." in
  match e with
  | Attrib (v,_) ->
    let o, _ = D.find v s in
    let clssname =
      try
        Some (E.get_clssname o)
      with E.Vague_obj _ ->
        None in
    D.update_elt v (Eobj (clssname, d)) s
  | Subscript (v,_) ->
    D.update_elt v (Edict d) s
  | _ -> failwith "update_lexpr: not a dict or object."

(** Enter function f with input arguments. Here we set the configuration to execute on
    the body of the function. If an argument with a source is sinking, we add a FINAL flag.
    If the function is sanitized we do the proper "cleaning". *)
let rec enter_fun (f,inp_exprs) cnf ctx : config =
  (* Try to find procedure in context *)
  let f_proc = try
      Some (P.get_func f ctx.prog)
    with Not_found -> None in
  
  (* Get line of code of current block *)
  let loc = List.hd cnf.block |> fst in

  if Option.is_some f_proc then
    (* Calculate value of input expressions.                                                 *
     * Configuration is updated in each evaluation expression.                               *
     * Each expression should generate just one value, if not implies that it is a function,
       therefore evaluation fails. *)
    let (te_ls, cnf): E.texpr list * config =
      begin try
        List.fold_left (fun (acc,cnf) inp_expr ->
          let tecnfs = expr_eval inp_expr cnf ctx in
          if List.length tecnfs > 1 then failwith "enter_fun: input generated multiple values.";
          let te, cnf = List.hd tecnfs |> fst |> Option.get, List.hd tecnfs |> snd in
          (te::acc,cnf)) ([],cnf) inp_exprs
      with _ -> failwith "enter_fun: exception raised when evaluating inputs." end in
    let te_ls = List.rev te_ls in
    let f_proc = Option.get f_proc in
    let sanitize = S.get_sanitize f_proc.sign in
    let input_args = ref (S.get_input f_proc.sign) in
    let flag = ref cnf.flag in
    (* let met_sink_source = ref false in *)
    (* Match each input with the signature of the procedure. *)
    let te_ls: (string * E.texpr) list = List.map
      (fun (te: E.texpr) ->
        let input_arg = List.hd !input_args in
        input_args := List.tl !input_args;
        match sanitize with
        (* Clear taint for te if function is sanitized *)
        | Some All | Some Parameters ->
          input_arg.name, E.clear_taint te
        | _ ->
          let te =
            try 
              E.add_taint te (Option.get input_arg.taint |> T.sink_add_loc loc |> T.sink_2t)
            with Invalid_argument _ -> te in
          if List.length (E.is_rule te) > 0 then begin
            if !Utils.debug then Printf.printf "Met sink in function %s.\n" f;
            (* met_sink_source := true; *)
            flag := Flag.add Flag.FINAL !flag end
          else
            if !Utils.debug then Printf.printf "Did not meet sink in function %s.\n" f;
          input_arg.name, te) te_ls in
    let state = List.fold_left (fun state (name,te) -> D.update_elt name te state) cnf.state te_ls in
    let block = try 
        L.block_to_ext ~sign:ctx.sign (Option.get f_proc.body)
      with Invalid_argument _ -> [ Lo.location_temp, L.Return (List.hd te_ls |> snd |> E.texpr_2expr) ] in
    let id = Id.make ~message:["Function evaluation"] true in
    { cnf with state ; block ; flag=(!flag) ; id }
  else begin
    (* If proc is not defined, return first argument. *)
    let e = try List.hd inp_exprs with _ -> failwith ("enter_fun: function " ^ f ^ " not defined and no input argument.") in
    let block: L.block_ext = [ Lo.location_temp, L.Return e ] in
    { cnf with block }
  end

and enter_method ?(obj=None) ((f, inpls): F.func * E.expr list) (cnf: config) (ctx: context) : config =
  (* The first argument is always self *)
  (* Evaluate input expressions *)
  let (te_ls, cnf): E.texpr list * config =
    begin try
      List.fold_left (fun (acc,cnf) inp_expr ->
        let tecnfs = expr_eval inp_expr cnf ctx in
        if List.length tecnfs > 1 then failwith "enter_fun: input generated multiple values.";
        let te, cnf = List.hd tecnfs |> fst |> Option.get, List.hd tecnfs |> snd in
        (te::acc,cnf)) ([],cnf) inpls
      with _ -> failwith "enter_fun: exception raised when evaluating inputs." end in

  let loc = List.hd cnf.block |> fst in
  let sanitize = S.get_sanitize f.sign in
  let input_args = ref (S.get_input f.sign) in
  if S.get_self f.sign then
    input_args := List.tl !input_args;
  let flag = ref cnf.flag in
  (* Match each input with the signature of the procedure. *)
  let te_ls: (string * E.texpr) list =
      List.map (fun (te: E.texpr) ->
        let input_arg = List.hd !input_args in
        input_args := List.tl !input_args;
        match sanitize with
        (* Clear taint for te if function is sanitized *)
        | Some All | Some Parameters ->
          input_arg.name, E.clear_taint te
        | _ ->
          let te =
            try 
              E.add_taint te (Option.get input_arg.taint |> T.sink_add_loc loc |> T.sink_2t)
            with Invalid_argument _ -> te in
          if List.length (E.is_rule te) > 0 then begin
            (* if !Utils.debug then Printf.printf "Met sink in function %s.\n" f; *)
            (* met_sink_source := true; *)
            flag := Flag.add Flag.FINAL !flag end;
          (* else *)
            (* if !Utils.debug then Printf.printf "Did not meet sink in function %s.\n" f; *)
          input_arg.name, te) te_ls
        in
  (* Create state from scratch with self and arguments passed *)
  let state = D.new_state (Some ctx.prog) in
  let state = List.fold_left (fun state (name,te) -> D.update_elt name te state) state te_ls in
  let state =
    if S.get_self f.sign then
      let obj = Option.get obj in
      D.update_elt "self" obj state
    else
      state in
  let block = try 
      L.block_to_ext ~sign:ctx.sign (Option.get f.body)
    with Invalid_argument _ -> [ Lo.location_temp, L.Return (List.hd te_ls |> snd |> E.texpr_2expr) ] in
  let id = Id.make ~message:["Function evaluation"] true in
  { cnf with state ; block ; flag=(!flag) ; id }

(** Add taint on return value of function. *)
and fun_taint_output (f,inps) cnf ctx (oe,cnf_temp: E.texpr option * config) =
  if Flag.check_flag Flag.FINAL cnf_temp.flag then begin
    None, cnf_temp
  end else 
    let f_proc = try
        Some (P.get_func f ctx.prog)
      with Not_found -> None in
    let loc = List.hd cnf.block |> fst in
    let te = try
        Option.get oe
      with Invalid_argument _ -> failwith "fun_taint_output: No output when returning?" in
    (* Get signature and remove taint accordingly *)
    let teo, cnf =
      if Option.is_some f_proc then
        let f_proc = Option.get f_proc in
        let sanitize = S.get_sanitize f_proc.sign in
        let te = match sanitize with
          | Some All -> E.clear_taint te
          | _ ->
            begin match S.get_output f_proc.sign with
            | None -> te
            | Some out ->
              let out = T.source_add_loc loc out in
              E.add_taint te (T.source_2t out)
            end in
        Some te, cnf
      else
        Some te, cnf in
    let state = D.set_sp (D.get_sp cnf_temp.state) cnf.state in
    teo, { cnf with state }

(** Evaluate language expression: turns expressions into taint-expressions.
    All Evar constructors must be replaced by the actual value mapped in the state. *)
and expr_eval (e : E.expr) (cnf: config) (ctx: context) : (E.texpr option * config) list =
    (* Printf.printf "expr_eval: e=%a\n" E.pp_expr e; *)
    match e with
    | Econst c -> [ Some (Econst (Taint.empty,c)), cnf ]
    | Evar v ->
      let te, state = D.find v cnf.state in
      [ Some te, { cnf with state } ]
    | Euop (op, e) ->
      let tecnfs = expr_eval e cnf ctx in
      List.map (fun (te,cnf) ->
        let te = try Option.get te with Invalid_argument _ -> failwith "expr_eval: None" in
        let t, e = E.get_taint te, E.get_expr te in
        Some (E.Euop (t, op, e)), cnf) tecnfs
    | Eop (e0, op, e1) ->
      let tecnfs = expr_eval e0 cnf ctx in
      let tecnfs = List.fold_left (fun acc (te0,cnf) -> (expr_eval e1 cnf ctx |> List.map (fun (te1,cnf) -> te0,te1,cnf)) @ acc) [] tecnfs in
      (* Since expr_eval returns a list, we have to run expr_eval of e1 for each of the generated configs *)
      (* Before we were ignoring modifications to the configuration. These are important since variables might be created. *)
      List.map (fun (te0,te1,cnf) ->
        let te0, te1 = try Option.get te0, Option.get te1
          with Invalid_argument _ -> failwith "expr_eval: None" in
        let t0, e0 = E.get_taint te0, E.get_expr te0 in
        let t1, e1 = E.get_taint te1, E.get_expr te1 in
        let t = Taint.comb t0 t1 in
        Some (E.Eop (t, e0, op, e1)), cnf) tecnfs
    | Ecall (f, exprs) ->
      if !Utils.debug then Printf.printf "expr_eval: calling proc %s\n" f;
      (* Check if it's class constructor *)
      begin try
        let clss = SMap.find f ctx.prog.classes in
        let cnf' = init ctx in
        let cnf' = { cnf' with block=(L.block_to_ext clss.body) } in
        let cnf' = exec_block cnf' ctx |> List.hd |> snd in
        (* Get svm *)
        let m = cnf'.state.svm in
        [ Some (Eobj (Some f, m)), cnf ]
      with Not_found ->
        (* If it's not a class constructor search function *)
        let cnf_f = enter_fun (f,exprs) cnf ctx in
        let state = cnf_f.state in
        (* Printf.printf "@!@ cnf_f.state:%a\n" (D.pp "  ") cnf_f.state; *)
        if !Utils.debug then Printf.printf "expr_eval: is cnf final? %b\n" (Flag.check_flag Flag.FINAL cnf_f.flag);
        if Flag.check_flag Flag.FINAL cnf_f.flag then
          [ None, { cnf_f with block=[] } ]
        else
          let ls = exec_block cnf_f ctx in
          List.map (fun_taint_output (f,exprs) { cnf with state } ctx) ls
      end
    | Elist ls ->
      let ls = List.fold_left (fun acc e ->
        (* List of possible values of e, because e may be a function *)
        let teo, _ = expr_eval e cnf ctx |> List.hd in
        let te = Option.get teo in
        te::acc) [] ls in
      let ls = List.rev ls in
      [ Some (Elist ls), cnf ]
    | Edict ed ->
      let td = SMap.fold (fun k e acc ->
        (* List of possible values of e, because e may be a function *)
        let teo, _ = expr_eval e cnf ctx |> List.hd in
        let te = Option.get teo in
        SMap.add k te acc) ed SMap.empty in
      [ Some (Edict td), cnf ]
    | Eattrib (v, expr) ->
      (* All method access is also attribute call. *)
      (* We need to be able to differentiate the 2 cases. *)
      (* Put together v and the name of the funcall in expr, then check if it's in lib. *)
      begin match expr with
      | Ecall (f,inpls) ->
        let f' = v ^ "." ^ f in
        let exists : bool = try ignore (P.get_func f' ctx.prog); true with Not_found -> false in
        if exists then
          expr_eval (Ecall (f',inpls)) cnf ctx
        else
          let te, state = D.find_limited v cnf.state in
            begin match te with
            | Eobj (c,tmap) ->
              (* 1. Get function from class *)
              let c = E.get_clssname (Eobj (c,tmap)) in
              let c = SMap.find c ctx.prog.classes in
              let f' = SMap.find f c.methods in
              (* 2. First argument of function is self, create temporary state *)
              let cnf_meth = enter_method ~obj:(Some te) (f', inpls) cnf ctx in
              (* 3. Evaluate with temporary state *)
              if Flag.check_flag Flag.FINAL cnf_meth.flag then
                [ None, { cnf_meth with block=[] } ]
              else
                let ls = exec_block cnf_meth ctx in
                List.map (fun_taint_output (f,inpls) { cnf with state } ctx) ls
            | _ -> failwith "expr_eval: not possible."
            end
      | Evar a ->
        (* When the attribute is not a function call, it is an element in the tmap. *)
        begin match D.find_limited v cnf.state with
        (* What we will do here is the following: *)
        (* If the attribute doesn't exist, we create it. If the class name is None, then its easy *)
        (* If the classname is Some name, we need to check the signatures to see if that class has a source on that attribute. *)
        | Eobj (clssname,tmap), state ->
          let te, tmap = (* We also return tmap because it may grow. *)
            try SMap.find a tmap, tmap (* If mapping already exists, we don't do any guessing. *)
            with Not_found -> begin
              let taint = try
                let name = Option.get clssname in
                let sign = S.find ctx.sign (name ^ "." ^ a) in
                if S.is_attr sign then
                  S.get_output sign |> Option.get |> T.source_2t
                else
                  failwith "expr_eval: function signature in attribute."
              with Not_found | Invalid_argument _ -> T.empty in
              add_symb_tmap tmap a taint
            end in
          [ Some te, { cnf with state } ]
        | _ -> failwith "expr_eval: trying to access an attribute of a non-object value."
        end
      | _ ->
        failwith "expr_eval: expression on eattrib is neither a function call or a var."
      end
    | Esubscript (expr, c) ->
      (* Use recursively eval_expr *)
      (* First get Eattrib value, then do Esubscript over that *)
      (* We will assume that this typechecks, i.e., v holds an object, expr will return either a list or a dict *)
      let (teo, cnf): E.texpr option * config = expr_eval expr cnf ctx |> List.hd in
      let te = Option.get teo in
      if E.is_int c then
        let ls = E.get_list te in
        let i = E.get_int c in
        let te = List.nth ls i in
        [ Some te, cnf ]
      else if E.is_string c then
        (* If it is a variable. We transform it to a dictionary. *)
        match te with
        | Edict td ->
          let k = E.get_str c in
          let te = SMap.find k td in
          [ Some te, cnf ]
        (* | Evar (taint, v) ->
          let tmap: E.texpr SMap.t = SMap.empty in
          let te, tmap = add_symb_tmap tmap v taint in
          failwith "asd" *)
        | _ -> failwith "expr_eval: unexpected expression for subscript."
      else
        failwith "expr_eval: Unexpected case."
      (* E.pp_expr stdout e; failwith "expr_eval: Esubscript Eattrib." *)
    | Ejoined values ->
      (* expr_eval (e : E.expr) (cnf: config) (ctx: context) : (E.texpr option * config) list *)
      let te = D.new_tsymbol "joined" in
      let (te, cnf): E.texpr * config = List.fold_left (fun (te,cnf) e ->
        let (teo',cnf') = expr_eval e cnf ctx |> List.hd in
        let t = Option.get teo' |> E.get_taint in
        let teo = E.add_taint te t in
        (teo,cnf')) (te, cnf) values in
      [Some te, cnf]

and eval_subscript (expr: E.expr) (cnf: config) (ctx: context) : (E.texpr option * config) list =
  match expr with
  | Esubscript (Evar name, key) ->
    let te, state = D.find name cnf.state in
    begin
      match te with
      | Edict td ->
        (* This fails in case the key is not present. *)
        (* This keeps completeness *)
        let k = E.get_str key in
        let te = SMap.find k td in
        [ Some te, cnf ]
      | _ ->
        failwith "todo"
    end
  | Esubscript (Eattrib (name, Evar attr), key) ->
    (* Get obj *)
    begin match D.find_limited name cnf.state with
    (* What we will do here is the following: *)
    (* If the attribute doesn't exist, we create it. If the class name is None, then its easy *)
    (* If the classname is Some name, we need to check the signatures to see if that class has a source on that attribute. *)
    | Eobj (clssname,tmap), state ->
      let te, tmap = (* We also return tmap because it may grow. *)
        try SMap.find attr tmap, tmap (* If attrib already exists, we don't do any guessing. *)
        with Not_found -> begin
          let taint =
            try
              let name = Option.get clssname in
              let sign = S.find ctx.sign (name ^ "." ^ attr) in
              if S.is_attr sign then
                S.get_output sign |> Option.get |> T.source_2t
              else
                failwith "expr_eval: function signature in attribute."
            with
            | Not_found -> failwith "eval_subscript: no signature found. We cannot create attribute."
            | Invalid_argument _ -> failwith "eval_subscript: no classname, so we fail. Or empty output."  in
          add_symb_tmap tmap attr taint
        end in
      (* We need to update posibbly bigger tmap *)
      let state = D.update_elt name (Eobj (clssname,tmap)) state in
      [ Some te, { cnf with state } ]
    | _ -> failwith "something"
    end
    (* *)
  | _ -> failwith "eval_subscript: unhandled case. We can fix later."

and stmt_assign cnf ctx : config list =
  match List.hd cnf.block |> snd with
  | Assign (v,e) ->
    let tecnfs = expr_eval e cnf ctx in
    let tecnfs = List.map (fun (te,cnf_e) ->
      (* Take incoming cnf for gaining knowledge *)
      if Option.is_some te then begin
        let te = Option.get te in
        let block = List.tl cnf.block in
        match v with
        | Name v ->
          (* In the next line is not clear to me which cnf.state to use, and why cnf_e.state
            doesn't expand the SP. *)
          let state = D.update_elt v te cnf_e.state in
          { cnf with state ; block }
        | Subscript (v,i) ->
          begin try
            let i = expr_eval i cnf ctx |> List.hd |> fst |> Option.get |> E.texpr_2expr |> E.expr_2int in
            let ls = D.find v cnf.state |> fst |> E.get_list in
            let ls = E.Elist (Aux.list_nth_replace i te ls) in
            let state = D.update_elt v ls cnf_e.state in
            { cnf with state ; block }
          with E.Not_a_number ->
            (* It must be a dictionary *)
            let state = update_lexpr (Subscript (v,i)) te cnf_e.state in
            { cnf with state ; block }
          end
        | Attrib (v,a) ->
          let state = update_lexpr (Attrib (v,a)) te cnf_e.state in
          { cnf with state ; block }
      end else if Flag.check_flag Flag.FINAL cnf_e.flag then
        { cnf_e with block=[] }
        (* cnf_e *)
      else
        failwith "stmt_assign: eval is None, and no FINAL flag.") tecnfs in
    tecnfs
  | _ ->
    Printf.printf "block: %a\n" (Prog.pp_block_ext "") cnf.block;
    failwith "stmt_assign: wrong block"

and stmt_return cnf ctx : (E.texpr option * config) list =
  match List.hd cnf.block |> snd with
  | Return e ->
    let tecnfs = expr_eval e cnf ctx |> List.map (fun (te,cnf) -> te, {cnf with block=[] }) in
    tecnfs
  | _ ->
    failwith "stmt_return: wrong block"

and stmt_expr cnf ctx : E.texpr option * config =
  match List.hd cnf.block |> snd with
  | Expr e ->
    let tecnfs = expr_eval e cnf ctx in
    begin match tecnfs with
    | [ (te,cnf') ] ->
      (* TODO check this line *)
      if Flag.check_flag Flag.FINAL cnf'.flag then
        te, { cnf' with block=[] }
      else
        let block = try List.tl cnf.block with _ -> [] in
        te, { cnf with block }
    | (te,cnf')::_ ->
      Printf.printf "stmt_expr: WARNING!!! more than one expression returned";
      if Flag.check_flag Flag.FINAL cnf'.flag then
        te, { cnf' with block=[] }
      else
        let block = try List.tl cnf.block with _ -> [] in
        te, { cnf with block }
    | [] -> failwith "stmt_expr: list is empty."
    end
  | _ ->
    Printf.printf "block: %a\n" (Prog.pp_block_ext "") cnf.block;
    failwith "stmt_expr: wrong block"

and stmt_symbolic_new cnf ctx : E.texpr option * config =
  match List.hd cnf.block |> snd with
  | SymbolicNew v ->
    let te = D.new_tsymbol v in
    let block = List.tl cnf.block in
    Some te, { cnf with block }
  | _ ->
    Printf.printf "block: %a\n" (Prog.pp_block_ext "") cnf.block;
    failwith "stmt_input: wrong block"

and stmt_if cnf ctx : (bool -> config option) list =
  let stmt = List.hd cnf.block in
  let line_number = (fst stmt).start in
  match snd stmt with
  | If (e,b0,b1) ->
    let tecnfs = expr_eval e cnf ctx in
    List.fold_left (fun acc (te,cnf) ->
    let te = try Option.get te with Invalid_argument _ -> failwith "stmt_if: te is None" in
    let t_branch = begin match D.check_argument cnf.state te |> fst with
      | SAT ->
        if !(Utils.debug) then Printf.printf "stmt_if t_branch SAT\n";
        let state = D.add_constraint ~line_number te cnf.state in
        let block = b0 @ List.tl cnf.block in
        Some { cnf with state ; block }
      | _ ->
        if !(Utils.debug) then Printf.printf "stmt_if t_branch UNSAT\n";
        None
      end in
    let nte = E.texpr_neg te in
    let f_branch = begin match D.check_argument cnf.state nte |> fst with
      | SAT ->
        if !(Utils.debug) then Printf.printf "stmt_if f_branch SAT\n";
        let state = D.add_constraint ~line_number nte cnf.state in
        let block = b1 @ List.tl cnf.block in
        Some { cnf with state ; block }
      | _ ->
        if !(Utils.debug) then Printf.printf "stmt_if f_branch UNSAT\n";
        None
      end in
    (fun b -> match b with true -> t_branch | false -> f_branch)::acc) [] tecnfs
  | _ ->
    Printf.printf "block: %a\n" (Prog.pp_block_ext "") cnf.block;
    failwith "stmt_if: wrong block"

and stmt_while cnf ctx : (bool -> config option) list =
  let stmt = List.hd cnf.block in
  let line_number = (fst stmt).start in
  match snd stmt with
  | Loop (e,b) | While (e,b) ->
    let tecnfs = expr_eval e cnf ctx in
    List.fold_left (fun acc (te,cnf) ->
      let te = try Option.get te with Invalid_argument _ -> failwith "stmt_while: te is None" in
      let t_branch = begin match D.check_argument cnf.state te |> fst with
        | SAT ->
          if !(Utils.debug) then Printf.printf "stmt_if t_branch SAT\n";
          let state = D.add_constraint ~line_number te cnf.state in
          let block = b @ ((fst stmt, Loop (e,b)) :: List.tl cnf.block) in
          let id = Id.make ~message:["T branch"] false in 
          Some { cnf with state ; block ; id }
        | _ ->
          if !(Utils.debug) then Printf.printf "stmt_if t_branch UNSAT\n";
          None
        end in
      let nte = E.texpr_neg te in
      let f_branch = begin match D.check_argument cnf.state nte |> fst with
        | SAT ->
          if !(Utils.debug) then Printf.printf "stmt_if f_branch SAT\n";
          let state = D.add_constraint ~line_number nte cnf.state in
          let block = List.tl cnf.block in
          let counter = C.delete cnf.counter in
          Some { cnf with state ; block ; counter }
        | _ ->
          if !(Utils.debug) then Printf.printf "stmt_if f_branch UNSAT\n";
          None
        end in
      (fun b -> match b with true -> t_branch | false -> f_branch)::acc) [] tecnfs
  | _ ->
    Printf.printf "block: %a\n" (Prog.pp_block_ext "") cnf.block;
    failwith "stmt_while: wrong block"

(* and stmt_loop cnf ctx : (bool -> config option) list =
  let stmt = List.hd cnf.block in
  let line_number = (fst stmt).start in
  match snd stmt with
  | Loop (e,b) ->
    let tecnfs = expr_eval e cnf ctx in
    List.fold_left (fun acc (te,cnf) ->
    let te = try Option.get te with Invalid_argument _ -> failwith "stmt_loop: te is None" in
    let t_branch = begin match D.check_argument cnf.state te |> fst with
      | SAT ->
        if !(Utils.debug) then Printf.printf "stmt_loop t_branch SAT\n";
        let state = D.add_constraint ~line_number te cnf.state in
        let block = b @ cnf.block in
          let id = Id.make ~message:["T branch"] false in 
        Some { cnf with state ; block ; id }
      | _ ->
        if !(Utils.debug) then Printf.printf "stmt_loop t_branch UNSAT\n";
        None
      end in
    let nte = E.expr_neg (fst te), snd te in
    let f_branch = begin match D.check_argument cnf.state nte |> fst with
      | SAT ->
        if !(Utils.debug) then Printf.printf "stmt_loop f_branch SAT\n";
        let state = D.add_constraint ~line_number nte cnf.state in
        let block = List.tl cnf.block in
        Some { cnf with state ; block }
      | _ ->
        if !(Utils.debug) then Printf.printf "stmt_if f_branch UNSAT\n";
        None
      end in
    (fun b -> match b with true -> t_branch | false -> f_branch)::acc) [] tecnfs
  | _ ->
    Printf.printf "block: %a\n" (Prog.pp_block_ext "") cnf.block;
    failwith "stmt_loop: wrong block" *)

and stmt_loop_max cnf ctx : (config option) list =
  let stmt = List.hd cnf.block in
  let line_number = (fst stmt).start in
  match snd stmt with
  | Loop (e,b) ->
    let tecnfs = expr_eval e cnf ctx in
    List.fold_left (fun acc (te,cnf) ->
    let te = try Option.get te with Invalid_argument _ -> failwith "stmt_loop_max: te is None" in
    let nte = E.texpr_neg te in
    let f_branch = begin match D.check_argument cnf.state nte |> fst with
      | SAT ->
        if !(Utils.debug) then Printf.printf "stmt_if f_branch SAT\n";
        let state = D.add_constraint ~line_number nte cnf.state in
        let block = List.tl cnf.block in
        Some { cnf with state ; block }
      | _ ->
        if !(Utils.debug) then Printf.printf "stmt_if f_branch UNSAT\n";
        None
      end in
    f_branch::acc) [] tecnfs
  | _ ->
    Printf.printf "block: %a\n" (Prog.pp_block_ext "") cnf.block;
    failwith "stmt_loop: wrong block"


and stmt_constr cnf ctx : config list =
  let stmt = List.hd cnf.block in
  let line_number = (fst stmt).start in
  match snd stmt with
  | Constr e ->
    let tecnfs = expr_eval e cnf ctx in
    List.fold_left (fun acc (te,cnf) ->
    let te = try Option.get te with Invalid_argument _ -> failwith "stmt_constr: te is None" in
    begin match D.check_argument cnf.state te |> fst with
    | SAT ->
      let state = D.add_constraint ~line_number ~important:true te cnf.state in
      let block = List.tl cnf.block in
      [{ cnf with state ; block }]
    | _ -> []
    end@acc) [] tecnfs
  | _ ->
    Printf.printf "block: %a\n" (Prog.pp_block_ext "") cnf.block;
    failwith "stmt_constr: wrong block"

(** Execute head of configuration's block. *)
and exec_stmt cnf ctx : (E.texpr option * config) list =
  if List.length cnf.block = 0 then [ None, cnf ] else
  let lc, stmt = List.hd cnf.block in
  let tcounter = C.step cnf.block cnf.counter in
  if !Utils.debug then
    Printf.printf "State %a: C -> %b,%a\n%aSTMT:\n%aBLOCK:\n%a\n" (Id.pp "") cnf.id (fst tcounter) C.pp (snd tcounter) (D.pp "  ") cnf.state (Prog.pp_stmt_ext "  ") stmt (Prog.pp_block_ext "  ") (List.tl cnf.block);
  flush stdout;
  let conf_post : (E.texpr option * config) list = match tcounter, stmt with
    | (true, counter), Assign _ ->
        List.map (fun cnf -> None, cnf) (stmt_assign { cnf with counter } ctx)
    | (true, counter), If _ ->
        let os = stmt_if { cnf with counter } ctx in
        List.fold_left (fun acc o ->
        let t_branch = try [ o true  |> Option.get ] with _ -> [] in
        let f_branch = try [ o false |> Option.get ] with _ -> [] in
        let tf = List.map (fun cnf -> None, cnf) (t_branch @ f_branch) in
        tf@acc) [] os
    | (true, counter), Constr _ ->
        List.map (fun cnf -> None, cnf) (stmt_constr cnf ctx)
    | (true, counter), Fun _ -> failwith "exec_stmt: funtion call is not yet implemented."
    | (true, counter), Return _ ->
        stmt_return { cnf with counter } ctx
    | (true, counter), Expr _ ->
        [ stmt_expr { cnf with counter } ctx ]
    | (true, counter), While _
    | (true, counter), Loop _ ->
        let os = stmt_while { cnf with counter } ctx in
        List.fold_left (fun acc o ->
          let t_branch = try [ o true  |> Option.get ] with _ -> [] in
          let f_branch = try [ o false |> Option.get ] with _ -> [] in
          let tf  = List.map (fun cnf -> None, cnf) (t_branch @ f_branch) in
          tf@acc) [] os
    | (false, counter), Loop _ ->
        (* Stopping loop forcibly *)
        if !(Utils.debug) then Printf.printf "exec_stmt: loop reached max unfolds. Analyzer will try false branch.\n";
        let os = stmt_loop_max { cnf with counter } ctx in
        List.fold_left (fun acc f_branch ->
          if Option.is_some f_branch then (None, Option.get f_branch)::acc
          else acc) [] os
    | (true, counter), SymbolicNew _ ->
      [ stmt_symbolic_new cnf ctx ]
    | (false, _), _ -> failwith "exec_stmt: counter/block discrepancy." in
    conf_post

(** Execute list of configurations until all configurations are final. *)
and exec_list (cnfs: config list) ctx : (E.texpr option * config) list =
  let rec aux (cnfs: config list) (final_cnfs: (E.texpr option * config) list) = (
  match cnfs with
  | [] -> final_cnfs
  | cnf::cnfs ->
    let ls = exec_stmt cnf ctx in
    (* Separate final configs from others *)
    let ls_final, ls_cont = List.fold_left
      (fun (ls_final, ls_cont) oecnf ->
        match List.length (snd oecnf).block = 0 with
        | true  -> (oecnf :: ls_final), ls_cont
        | false -> ls_final, (snd oecnf::ls_cont))
      ([],[]) ls in
    aux (cnfs @ ls_cont) (ls_final @ final_cnfs)) in
  aux cnfs []

(** Execute configuration. *)
and exec_block (cnf: config) ctx : (E.texpr option * config) list =
  if Flag.check_flag Flag.FINAL cnf.flag then
    [ None, cnf ]
  else
    exec_list [ cnf ] ctx

let check_illegal_flows (cnf: config) (_: context) : bool * T.rule list =
  let svm = D.get_svm cnf.state in
  let ro = Svm.fold (fun v te acc -> E.is_rule te @ acc) svm [] in
    (* if not (E.is_list te) then
      let t = E.get_taint te in
      match Taint.is_t_rule t with
      | None -> acc
      | Some r -> (v,r)::acc
    else
      acc *)
  if List.length ro > 0 then
    true, ro
  else
    false, ro

let analyze_prog ctx =
  let cnf_init = init ctx in
  let cnf_final = exec_block cnf_init ctx in
  let cnf_final = List.map (fun (ote,cnf) -> ote, { cnf with id=Id.set_message ["Final"] cnf.id }) cnf_final in
  let cnf_final = List.fold_left (fun acc (ote,cnf) ->
    let c = D.check cnf.state in
    match fst c with
    | SAT -> (snd c,ote,cnf)::acc
    | _ -> acc) [] cnf_final in
  Printf.printf "\nFinal branches: %d\n\n" (List.length cnf_final);
    List.iter
      (fun (zsolver,ote,cnf) ->
        let is_iflow, rules = check_illegal_flows cnf ctx in
        if is_iflow then
          Printf.printf "FINAL STATE, RULE TRIGGERED:\n   id: %a\n%a" (Id.pp "") cnf.id (D.pp "  ") cnf.state
        else
          Printf.printf "FINAL STATE:\n   id: %a\n%a" (Id.pp "") cnf.id (D.pp "  ") cnf.state;
        if is_iflow then begin
          Printf.printf "Rule %d triggered. '%s'\n" (List.hd rules).code (List.hd rules).name;
          let model = SMT.get_string_model zsolver in
          if Option.is_some model then
            let model = Option.get model in
            if String.length model > 0 then
              Printf.printf "MODEL:\n%s\n" model
            else
              Printf.printf "Trace can be reached with any initial memory.\n"
          else
            Printf.printf "Model cannot be generated.\n"
        end;
        if Option.is_some ote then
          Printf.printf "Return value: %a\n" E.pp_texpr (Option.get ote)
        else
          Printf.printf "No return value.\n";
        Printf.printf "\n")
      cnf_final;
  cnf_final
